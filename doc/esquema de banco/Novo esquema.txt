-- ===================================
-- CRIAÇÃO DOS TIPOS ENUM (NECESSÁRIOS ANTES DAS TABELAS)
-- ===================================
CREATE TYPE order_status AS ENUM ('pending', 'paid', 'canceled', 'refunded');
CREATE TYPE ticket_status AS ENUM ('reserved', 'confirmed', 'used', 'canceled');

-- ===================================
-- TABELA: categories
-- ===================================
CREATE TABLE public.categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  description text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT categories_pkey PRIMARY KEY (id)
);

-- ===================================
-- TABELA: events (id corrigido para uuid)
-- ===================================
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  date timestamptz NOT NULL,
  location text NOT NULL,
  price numeric NOT NULL,
  available_tickets integer NOT NULL DEFAULT 0,
  image_url text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT events_pkey PRIMARY KEY (id)
);

-- ===================================
-- TABELA: products
-- ===================================
-- Removido: sizes ARRAY (redundante com product_stock)
CREATE TABLE public.products (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  price numeric NOT NULL,
  image_url text,
  in_stock boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  category uuid,
  CONSTRAINT products_pkey PRIMARY KEY (id),
  CONSTRAINT fk_products_category FOREIGN KEY (category) REFERENCES public.categories(id)
);

-- ===================================
-- TABELA: product_stock (substitui product_sizes)
-- ===================================
-- Unificada: controla tamanho, estoque e reserva
-- Removida tabela product_sizes (redundante)
CREATE TABLE public.product_stock (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  product_id uuid NOT NULL,
  size text NOT NULL CHECK (size = ANY (ARRAY['PP','P','M','G','GG','XG','XXG'])),
  quantity integer NOT NULL DEFAULT 0 CHECK (quantity >= 0),
  reserved_quantity integer NOT NULL DEFAULT 0 CHECK (reserved_quantity >= 0),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT product_stock_pkey PRIMARY KEY (id),
  CONSTRAINT fk_product_stock_product FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE,
  CONSTRAINT uk_product_size UNIQUE (product_id, size)
);

-- ===================================
-- TABELA: tickets (event_id agora é uuid)
-- ===================================
CREATE TABLE public.tickets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id uuid NOT NULL,
  price numeric NOT NULL,
  quantity integer NOT NULL,
  total_price numeric NOT NULL,
  status ticket_status NOT NULL DEFAULT 'reserved',
  user_id uuid,
  created_at timestamptz NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamptz NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT tickets_pkey PRIMARY KEY (id),
  CONSTRAINT fk_tickets_event FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT fk_tickets_user FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

-- ===================================
-- TABELA: orders
-- ===================================
-- Removido: items jsonb (duplicado com order_items)
CREATE TABLE public.orders (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  amount numeric NOT NULL,
  customer_data jsonb,
  billing_data jsonb,
  status order_status NOT NULL DEFAULT 'pending',
  abacate_charge_id text,
  pix_qr_code_url text,
  pix_copy_paste text,
  payment_id text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT orders_pkey PRIMARY KEY (id),
  CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

-- ===================================
-- TABELA: cart_items
-- ===================================
-- Removido: total_price (calculável via quantity * price)
CREATE TABLE public.cart_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  product_id uuid,
  ticket_id uuid,
  quantity integer NOT NULL DEFAULT 1 CHECK (quantity > 0),
  size text,
  price numeric NOT NULL,
  created_at timestamptz NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamptz NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT cart_items_pkey PRIMARY KEY (id),
  CONSTRAINT fk_cart_user FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,
  CONSTRAINT fk_cart_product FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE,
  CONSTRAINT fk_cart_ticket FOREIGN KEY (ticket_id) REFERENCES public.tickets(id) ON DELETE CASCADE
);

-- ===================================
-- TABELA: order_items
-- ===================================
CREATE TABLE public.order_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  order_id uuid NOT NULL,
  product_id uuid,
  ticket_id uuid,
  quantity integer NOT NULL,
  size text,
  price numeric NOT NULL,
  name text,
  total numeric NOT NULL,
  created_at timestamptz NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT order_items_pkey PRIMARY KEY (id),
  CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES public.orders(id) ON DELETE CASCADE,
  CONSTRAINT fk_order_items_product FOREIGN KEY (product_id) REFERENCES public.products(id),
  CONSTRAINT fk_order_items_ticket FOREIGN KEY (ticket_id) REFERENCES public.tickets(id)
);

-- ===================================
-- TABELA: profiles
-- ===================================
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text,
  phone text,
  name text,
  username text,
  avatar_url text,
  first_name text,
  last_name text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  preferences jsonb DEFAULT '{
    "theme": "system",
    "currency": "BRL",
    "language": "pt-BR",
    "sms_notifications": false,
    "email_notifications": true,
    "notifications_enabled": true
  }'::jsonb,
  theme text DEFAULT 'system' CHECK (theme IN ('light', 'dark', 'system')),
  notifications_enabled boolean DEFAULT true,
  email_notifications boolean DEFAULT true,
  sms_notifications boolean DEFAULT false,
  language text DEFAULT 'pt-BR',
  currency text DEFAULT 'BRL',
  role text DEFAULT 'user' CHECK (role IN ('user', 'admin', 'organizer')),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT fk_profiles_user FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- ===================================
-- TABELA: rls_performance_metrics
-- ===================================
CREATE TABLE public.rls_performance_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  table_name text NOT NULL,
  policy_name text NOT NULL,
  query_duration_ms numeric NOT NULL,
  query_type text NOT NULL,
  user_id uuid,
  created_at timestamptz DEFAULT now(),
  CONSTRAINT rls_performance_metrics_pkey PRIMARY KEY (id)
);

-- ===================================
-- ÍNDICES PARA DESEMPENHO
-- ===================================
CREATE INDEX idx_cart_items_user_id ON cart_items(user_id);
CREATE INDEX idx_cart_items_product_id ON cart_items(product_id);
CREATE INDEX idx_cart_items_ticket_id ON cart_items(ticket_id);

CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_created_at ON orders(created_at);

CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);
CREATE INDEX idx_order_items_ticket_id ON order_items(ticket_id);

CREATE INDEX idx_tickets_user_id ON tickets(user_id);
CREATE INDEX idx_tickets_event_id ON tickets(event_id);
CREATE INDEX idx_tickets_status ON tickets(status);

CREATE INDEX idx_product_stock_product_id ON product_stock(product_id);
CREATE INDEX idx_products_category ON products(category);

-- ===================================
-- TRIGGER: Atualizar updated_at automaticamente
-- ===================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = timezone('utc'::text, now());
   RETURN NEW;
END;
$$ language 'plpgsql';

-- Aplicar triggers
CREATE TRIGGER update_categories_updated_at BEFORE UPDATE ON categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_events_updated_at BEFORE UPDATE ON events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_product_stock_updated_at BEFORE UPDATE ON product_stock FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tickets_updated_at BEFORE UPDATE ON tickets FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_cart_items_updated_at BEFORE UPDATE ON cart_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();