// Auth.tsx - Versão com componentes completamente isolados
// Esta é a solução mais robusta para evitar interferência entre formulários

import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { FcGoogle } from 'react-icons/fc';
import { Eye, EyeOff } from 'lucide-react';

// ============================================
// COMPONENTE DE LOGIN (ISOLADO)
// ============================================
const LoginForm: React.FC<{ onGoogleAuth: () => void }> = ({ onGoogleAuth }) => {
  // Estados exclusivos do Login
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      console.log('Login attempt:', { email });
      
      // TODO: Implementar chamada API real
      // const response = await api.login({ email, password });
      
      // Simulação de API
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Sucesso simulado
      if (email === 'admin@example.com' && password === 'admin123') {
        console.log('Login bem-sucedido!');
        // Redirecionar ou salvar token
        window.location.href = '/dashboard';
      } else {
        throw new Error('Credenciais inválidas');
      }
      
    } catch (err: any) {
      setError(err.message || 'Erro ao fazer login');
      console.error('Login error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Função para limpar o formulário
  const clearForm = () => {
    setEmail('');
    setPassword('');
    setError('');
  };

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-xl font-semibold mb-2">Bem-vindo de volta</h3>
        <p className="text-sm text-gray-600">
          Entre com seu email e senha para acessar sua conta
        </p>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="login-email-field">Email</Label>
          <Input
            id="login-email-field"
            data-testid="login-email"
            type="email"
            placeholder="seu@email.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            disabled={isLoading}
            autoComplete="email"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="login-password-field">Senha</Label>
          <div className="relative">
            <Input
              id="login-password-field"
              data-testid="login-password"
              type={showPassword ? "text" : "password"}
              placeholder="••••••••"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              disabled={isLoading}
              autoComplete="current-password"
              className="pr-10"
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
              tabIndex={-1}
            >
              {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
            </button>
          </div>
        </div>

        <div className="flex items-center justify-between">
          <label className="flex items-center">
            <input type="checkbox" className="mr-2" />
            <span className="text-sm text-gray-600">Lembrar de mim</span>
          </label>
          <a href="/forgot-password" className="text-sm text-orange-500 hover:underline">
            Esqueceu a senha?
          </a>
        </div>

        <Button
          type="submit"
          data-testid="login-submit"
          disabled={isLoading}
          className="w-full bg-orange-500 hover:bg-orange-600 text-white"
        >
          {isLoading ? 'Entrando...' : 'Entrar'}
        </Button>
      </form>

      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <span className="w-full border-t" />
        </div>
        <div className="relative flex justify-center text-xs uppercase">
          <span className="bg-white px-2 text-gray-500">ou</span>
        </div>
      </div>

      <Button
        type="button"
        variant="outline"
        onClick={onGoogleAuth}
        disabled={isLoading}
        data-testid="login-google"
        className="w-full"
      >
        <FcGoogle className="mr-2" size={20} />
        Entrar com Google
      </Button>

      {/* Debug info - remover em produção */}
      {process.env.NODE_ENV === 'development' && (
        <div className="text-xs text-gray-400 mt-2">
          Debug Login: {email || '(vazio)'} | Isolado: ✅
        </div>
      )}
    </div>
  );
};

// ============================================
// COMPONENTE DE CADASTRO (ISOLADO)
// ============================================
const SignupForm: React.FC<{ onGoogleAuth: () => void; onSuccess: () => void }> = ({ 
  onGoogleAuth, 
  onSuccess 
}) => {
  // Estados exclusivos do Cadastro
  const [email, setEmail] = useState('');
  const [name, setName] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (name.length < 3) {
      newErrors.name = 'Nome deve ter pelo menos 3 caracteres';
    }

    if (!email.includes('@')) {
      newErrors.email = 'Email inválido';
    }

    if (password.length < 6) {
      newErrors.password = 'Senha deve ter pelo menos 6 caracteres';
    }

    if (password !== confirmPassword) {
      newErrors.confirmPassword = 'As senhas não coincidem';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    setErrors({});

    try {
      console.log('Signup attempt:', { email, name });
      
      // TODO: Implementar chamada API real
      // const response = await api.signup({ email, name, password });
      
      // Simulação de API
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Sucesso simulado
      console.log('Cadastro bem-sucedido!');
      
      // Limpa o formulário
      setEmail('');
      setName('');
      setPassword('');
      setConfirmPassword('');
      
      // Chama callback de sucesso
      onSuccess();
      
    } catch (err: any) {
      setErrors({ 
        general: err.message || 'Erro ao cadastrar. Tente novamente.' 
      });
      console.error('Signup error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-xl font-semibold mb-2">Crie sua conta</h3>
        <p className="text-sm text-gray-600">
          Preencha as informações abaixo para se cadastrar
        </p>
      </div>

      {errors.general && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          {errors.general}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="signup-email-field">Email</Label>
          <Input
            id="signup-email-field"
            data-testid="signup-email"
            type="email"
            placeholder="seu@email.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            disabled={isLoading}
            autoComplete="email"
            className={errors.email ? 'border-red-500' : ''}
          />
          {errors.email && (
            <p className="text-red-500 text-sm">{errors.email}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="signup-name-field">Nome de usuário</Label>
          <Input
            id="signup-name-field"
            data-testid="signup-name"
            type="text"
            placeholder="Seu nome"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            disabled={isLoading}
            autoComplete="name"
            className={errors.name ? 'border-red-500' : ''}
          />
          {errors.name && (
            <p className="text-red-500 text-sm">{errors.name}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="signup-password-field">Senha</Label>
          <div className="relative">
            <Input
              id="signup-password-field"
              data-testid="signup-password"
              type={showPassword ? "text" : "password"}
              placeholder="••••••••"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              disabled={isLoading}
              autoComplete="new-password"
              className={errors.password ? 'border-red-500 pr-10' : 'pr-10'}
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
              tabIndex={-1}
            >
              {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
            </button>
          </div>
          {errors.password && (
            <p className="text-red-500 text-sm">{errors.password}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="signup-confirm-field">Confirme sua senha</Label>
          <div className="relative">
            <Input
              id="signup-confirm-field"
              data-testid="signup-confirm-password"
              type={showConfirmPassword ? "text" : "password"}
              placeholder="••••••••"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              disabled={isLoading}
              autoComplete="new-password"
              className={errors.confirmPassword ? 'border-red-500 pr-10' : 'pr-10'}
            />
            <button
              type="button"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
              tabIndex={-1}
            >
              {showConfirmPassword ? <EyeOff size={20} /> : <Eye size={20} />}
            </button>
          </div>
          {errors.confirmPassword && (
            <p className="text-red-500 text-sm">{errors.confirmPassword}</p>
          )}
        </div>

        <Button
          type="submit"
          data-testid="signup-submit"
          disabled={isLoading}
          className="w-full bg-orange-500 hover:bg-orange-600 text-white"
        >
          {isLoading ? 'Cadastrando...' : 'Cadastrar'}
        </Button>
      </form>

      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <span className="w-full border-t" />
        </div>
        <div className="relative flex justify-center text-xs uppercase">
          <span className="bg-white px-2 text-gray-500">ou</span>
        </div>
      </div>

      <Button
        type="button"
        variant="outline"
        onClick={onGoogleAuth}
        disabled={isLoading}
        data-testid="signup-google"
        className="w-full"
      >
        <FcGoogle className="mr-2" size={20} />
        Cadastrar com Google
      </Button>

      {/* Debug info - remover em produção */}
      {process.env.NODE_ENV === 'development' && (
        <div className="text-xs text-gray-400 mt-2">
          Debug Signup: {email || '(vazio)'} | {name || '(vazio)'} | Isolado: ✅
        </div>
      )}
    </div>
  );
};

// ============================================
// COMPONENTE PRINCIPAL (ORQUESTRADOR)
// ============================================
function Auth() {
  const [activeTab, setActiveTab] = useState<'login' | 'signup'>('login');
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);

  // Handler compartilhado para Google Auth
  const handleGoogleAuth = async () => {
    const action = activeTab === 'login' ? 'Login' : 'Cadastro';
    console.log(`${action} com Google iniciado`);
    
    try {
      // TODO: Implementar OAuth real
      // window.location.href = '/api/auth/google';
      
      alert(`${action} com Google (não implementado)`);
    } catch (error) {
      console.error('Erro no Google Auth:', error);
    }
  };

  // Handler para sucesso no cadastro
  const handleSignupSuccess = () => {
    setShowSuccessMessage(true);
    setActiveTab('login');
    
    // Remove mensagem após 5 segundos
    setTimeout(() => {
      setShowSuccessMessage(false);
    }, 5000);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <div className="text-orange-500 text-5xl">🍄</div>
          </div>
          <CardTitle className="text-2xl font-bold text-orange-500">
            Borboleta Eventos
          </CardTitle>
          <CardDescription>
            Entre ou crie uma conta para continuar
          </CardDescription>
        </CardHeader>

        <CardContent>
          {showSuccessMessage && (
            <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-4">
              Cadastro realizado com sucesso! Faça login para continuar.
            </div>
          )}

          <Tabs 
            value={activeTab} 
            onValueChange={(value) => setActiveTab(value as 'login' | 'signup')}
            className="w-full"
          >
            <TabsList className="grid w-full grid-cols-2 mb-6">
              <TabsTrigger value="login" data-testid="login-tab">
                Login
              </TabsTrigger>
              <TabsTrigger value="signup" data-testid="signup-tab">
                Cadastro
              </TabsTrigger>
            </TabsList>

            <TabsContent value="login">
              <LoginForm onGoogleAuth={handleGoogleAuth} />
            </TabsContent>

            <TabsContent value="signup">
              <SignupForm 
                onGoogleAuth={handleGoogleAuth}
                onSuccess={handleSignupSuccess}
              />
            </TabsContent>
          </Tabs>

          <div className="text-center text-xs text-gray-500 mt-6">
            Ao entrar ou se cadastrar, você concorda com nossos{' '}
            <a href="/termos" className="text-orange-500 hover:underline">
              Termos de Uso
            </a>{' '}
            e{' '}
            <a href="/privacidade" className="text-orange-500 hover:underline">
              Política de Privacidade
            </a>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default Auth;