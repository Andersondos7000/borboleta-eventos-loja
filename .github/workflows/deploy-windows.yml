name: ðŸ¤– Supabase Deploy (Windows)

on:
  push:
    branches: [main, staging]
    paths: ['supabase/migrations/**']
  pull_request:
    branches: [main]

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

jobs:
  validate:
    if: github.event_name == 'pull_request'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Supabase CLI
        run: |
          iwr -useb https://cli.supabase.com/windows-install.ps1 | iex
      
      - name: Validar migraÃ§Ãµes
        env:
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
        run: |
          .\supabase-agent\validate.ps1

  backup:
    if: github.event_name != 'pull_request'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Supabase CLI
        run: |
          iwr -useb https://cli.supabase.com/windows-install.ps1 | iex
      
      - name: Backup Database
        env:
          PROJECT_REF: ${{ github.ref == 'refs/heads/main' && secrets.SUPABASE_PROJECT_REF_PRODUCTION || secrets.SUPABASE_PROJECT_REF_STAGING }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          .\supabase-agent\backup.ps1

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: windows-latest
    needs: backup
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Supabase CLI
        run: |
          iwr -useb https://cli.supabase.com/windows-install.ps1 | iex
      
      - name: Deploy
        env:
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}
          ENVIRONMENT: staging
        run: |
          .\supabase-agent\deploy.ps1

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: backup
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Supabase CLI
        run: |
          iwr -useb https://cli.supabase.com/windows-install.ps1 | iex
      
      - name: Deploy
        env:
          PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF_PRODUCTION }}
          ENVIRONMENT: production
        run: |
          .\supabase-agent\deploy.ps1

  edge-functions:
    if: github.event_name != 'pull_request'
    runs-on: windows-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Supabase CLI
        run: |
          iwr -useb https://cli.supabase.com/windows-install.ps1 | iex
      
      - name: Deploy Edge Functions
        env:
          PROJECT_REF: ${{ github.ref == 'refs/heads/main' && secrets.SUPABASE_PROJECT_REF_PRODUCTION || secrets.SUPABASE_PROJECT_REF_STAGING }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          .\supabase-agent\edge-functions.ps1

  monitor:
    if: github.event_name != 'pull_request'
    runs-on: windows-latest
    needs: [deploy-staging, deploy-production, edge-functions]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Supabase CLI
        run: |
          iwr -useb https://cli.supabase.com/windows-install.ps1 | iex
      
      - name: Monitor Database Health
        env:
          PROJECT_REF: ${{ github.ref == 'refs/heads/main' && secrets.SUPABASE_PROJECT_REF_PRODUCTION || secrets.SUPABASE_PROJECT_REF_STAGING }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          .\supabase-agent\monitor.ps1