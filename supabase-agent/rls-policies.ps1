# Script para implementar pol√≠ticas RLS (Row Level Security) para tabelas cr√≠ticas no Supabase

# Definir cores para sa√≠da
$Green = "`e[32m"
$Red = "`e[31m"
$Yellow = "`e[33m"
$Reset = "`e[0m"

# Fun√ß√£o para exibir mensagens de status
function Write-Status {
    param (
        [string]$Message,
        [string]$Status,
        [string]$Color = $Green
    )
    Write-Host "[$($Color)$($Status)$($Reset)] $Message"
}

# Fun√ß√£o para verificar vari√°veis de ambiente
function Test-EnvVar {
    param (
        [string]$Name,
        [switch]$Required
    )
    
    $value = [Environment]::GetEnvironmentVariable($Name, "Process")
    
    if ([string]::IsNullOrEmpty($value)) {
        if ($Required) {
            Write-Status "Vari√°vel $Name n√£o definida" "ERRO" $Red
            return $false
        } else {
            Write-Status "Vari√°vel $Name n√£o definida" "AVISO" $Yellow
            return $false
        }
    } else {
        $maskedValue = if ($Name -eq "SUPABASE_ACCESS_TOKEN") { $value.Substring(0, 4) + "..." + $value.Substring($value.Length - 4) } else { $value }
        Write-Status "Vari√°vel $Name = $maskedValue" "OK"
        return $true
    }
}

# Fun√ß√£o para confirmar a√ß√£o em produ√ß√£o
function Confirm-ProductionAction {
    param (
        [string]$Action
    )
    
    if ($env:ENVIRONMENT -eq "production") {
        Write-Host "`n‚ö†Ô∏è ATEN√á√ÉO: Voc√™ est√° prestes a $Action no ambiente de PRODU√á√ÉO!" -ForegroundColor Red
        Write-Host "Esta a√ß√£o pode afetar dados reais e usu√°rios em produ√ß√£o." -ForegroundColor Yellow
        
        $confirmation = Read-Host "Tem certeza que deseja continuar? (S/N)"
        
        if ($confirmation -ne "S") {
            Write-Host "Opera√ß√£o cancelada pelo usu√°rio." -ForegroundColor Yellow
            return $false
        }
    }
    
    return $true
}

Write-Host "üîí Implementa√ß√£o de Pol√≠ticas RLS - Supabase" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# Configura√ß√£o
$env:ENVIRONMENT = if ([string]::IsNullOrEmpty($env:ENVIRONMENT)) { "staging" } else { $env:ENVIRONMENT }
$env:DRY_RUN = if ([string]::IsNullOrEmpty($env:DRY_RUN)) { "false" } else { $env:DRY_RUN }

# 1. Verificar vari√°veis de ambiente
Write-Host "`nüìã Verificando vari√°veis de ambiente..." -ForegroundColor Cyan

$tokenOk = Test-EnvVar -Name "SUPABASE_ACCESS_TOKEN" -Required
$projectRefOk = Test-EnvVar -Name "PROJECT_REF" -Required
Test-EnvVar -Name "ENVIRONMENT"
Test-EnvVar -Name "DRY_RUN"

if (-not ($tokenOk -and $projectRefOk)) {
    Write-Host "`n‚ùå Opera√ß√£o falhou: Vari√°veis de ambiente obrigat√≥rias n√£o definidas" -ForegroundColor Red
    Write-Host "Configure as vari√°veis de ambiente necess√°rias e tente novamente:" -ForegroundColor Yellow
    Write-Host "  $env:USERPROFILE\.supabase\access-token" -ForegroundColor Yellow
    Write-Host "  \$env:PROJECT_REF = 'seu_project_ref'" -ForegroundColor Yellow
    exit 1
}

# 2. Verificar CLI do Supabase
Write-Host "`nüìã Verificando CLI do Supabase..." -ForegroundColor Cyan

try {
    $supabaseVersion = supabase --version
    Write-Status "Supabase CLI $supabaseVersion" "OK"
} catch {
    Write-Status "Supabase CLI n√£o encontrado" "ERRO" $Red
    Write-Host "Instale a CLI do Supabase: https://supabase.com/docs/guides/cli" -ForegroundColor Yellow
    exit 1
}

# 3. Verificar autentica√ß√£o
Write-Host "`nüìã Verificando autentica√ß√£o..." -ForegroundColor Cyan

try {
    $whoami = supabase whoami
    if ($whoami -match "You are authenticated as") {
        Write-Status "Autenticado com sucesso" "OK"
    } else {
        Write-Status "Falha na autentica√ß√£o" "ERRO" $Red
        exit 1
    }
} catch {
    Write-Status "Falha na autentica√ß√£o" "ERRO" $Red
    Write-Host "Verifique seu token de acesso e tente novamente" -ForegroundColor Yellow
    exit 1
}

# 4. Vincular projeto
Write-Host "`nüìã Vinculando projeto..." -ForegroundColor Cyan

try {
    supabase link --project-ref $env:PROJECT_REF
    Write-Status "Projeto vinculado com sucesso" "OK"
} catch {
    Write-Status "Falha ao vincular projeto" "ERRO" $Red
    Write-Host "Verifique a refer√™ncia do projeto e tente novamente" -ForegroundColor Yellow
    exit 1
}

# 5. Verificar status
Write-Host "`nüìã Verificando status do projeto..." -ForegroundColor Cyan

try {
    $status = supabase status
    Write-Status "Status obtido com sucesso" "OK"
    Write-Host $status
    
    # Extrair URL do banco de dados
    $dbUrl = ($status | Select-String -Pattern "DB URL: (.+)" | ForEach-Object { $_.Matches.Groups[1].Value })
    
    if (-not $dbUrl) {
        Write-Status "URL do banco de dados n√£o encontrada" "ERRO" $Red
        exit 1
    }
} catch {
    Write-Status "Falha ao obter status" "ERRO" $Red
    exit 1
}

# 6. Verificar tabelas cr√≠ticas
Write-Host "`nüìã Verificando tabelas cr√≠ticas..." -ForegroundColor Cyan

$criticalTables = @("customers", "orders", "payments", "tickets")
$existingTables = @()

try {
    foreach ($table in $criticalTables) {
        $query = "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = '$table');"
        $exists = psql "$dbUrl" -t -c "$query" | ForEach-Object { $_.Trim() }
        
        if ($exists -eq "t") {
            Write-Status "Tabela encontrada: $table" "OK"
            $existingTables += $table
        } else {
            Write-Status "Tabela n√£o encontrada: $table" "AVISO" $Yellow
        }
    }
    
    if ($existingTables.Count -eq 0) {
        Write-Status "Nenhuma tabela cr√≠tica encontrada" "ERRO" $Red
        Write-Host "Verifique se as tabelas foram criadas corretamente" -ForegroundColor Yellow
        exit 1
    }
} catch {
    Write-Status "Falha ao verificar tabelas" "ERRO" $Red
    Write-Host "Erro: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 7. Verificar RLS atual
Write-Host "`nüìã Verificando RLS atual..." -ForegroundColor Cyan

$tablesWithoutRLS = @()

try {
    foreach ($table in $existingTables) {
        $query = @"
        SELECT relrowsecurity FROM pg_class 
        WHERE relname = '$table' AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
"@
        
        $rlsEnabled = psql "$dbUrl" -t -c "$query" | ForEach-Object { $_.Trim() }
        
        if ($rlsEnabled -eq "t") {
            Write-Status "RLS j√° ativo: $table" "OK"
        } else {
            Write-Status "RLS inativo: $table" "AVISO" $Yellow
            $tablesWithoutRLS += $table
        }
    }
} catch {
    Write-Status "Falha ao verificar RLS" "ERRO" $Red
    Write-Host "Erro: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 8. Confirmar implementa√ß√£o de RLS
if ($tablesWithoutRLS.Count -gt 0) {
    Write-Host "`nüìã Tabelas sem RLS: $($tablesWithoutRLS -join ", ")" -ForegroundColor Cyan
    
    if (-not (Confirm-ProductionAction "implementar RLS")) {
        exit 0
    }
    
    if ($env:DRY_RUN -eq "true") {
        Write-Host "`nüîç Modo de simula√ß√£o (DRY_RUN=true)" -ForegroundColor Yellow
        Write-Host "As seguintes altera√ß√µes seriam aplicadas:" -ForegroundColor Yellow
        
        foreach ($table in $tablesWithoutRLS) {
            Write-Host "  - Ativar RLS na tabela $table" -ForegroundColor Yellow
            Write-Host "  - Criar pol√≠ticas para $table" -ForegroundColor Yellow
        }
        
        Write-Host "`n‚úÖ Simula√ß√£o conclu√≠da. Defina DRY_RUN=false para aplicar as altera√ß√µes." -ForegroundColor Green
        exit 0
    }
    
    # 9. Implementar RLS
    Write-Host "`nüìã Implementando RLS..." -ForegroundColor Cyan
    
    # Criar migra√ß√£o para RLS
    $timestamp = Get-Date -Format "yyyyMMddHHmmss"
    $migrationName = "implement_rls_policies_$timestamp"
    
    $migrationSql = @"
-- Implementa√ß√£o de pol√≠ticas RLS para tabelas cr√≠ticas

"@
    
    foreach ($table in $tablesWithoutRLS) {
        $migrationSql += @"
-- Ativar RLS na tabela $table
ALTER TABLE public.$table ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para administradores (acesso total)
CREATE POLICY "Administradores t√™m acesso total a $table" ON public.$table
    USING (auth.uid() IN (SELECT user_id FROM public.administrators))
    WITH CHECK (auth.uid() IN (SELECT user_id FROM public.administrators));

"@
        
        # Adicionar pol√≠ticas espec√≠ficas por tabela
        switch ($table) {
            "customers" {
                $migrationSql += @"
-- Pol√≠tica para usu√°rios verem apenas seus pr√≥prios dados
CREATE POLICY "Usu√°rios podem ver apenas seus pr√≥prios dados" ON public.customers
    FOR SELECT
    USING (auth.uid() = user_id);

-- Pol√≠tica para usu√°rios atualizarem apenas seus pr√≥prios dados
CREATE POLICY "Usu√°rios podem atualizar apenas seus pr√≥prios dados" ON public.customers
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

"@
            }
            "orders" {
                $migrationSql += @"
-- Pol√≠tica para usu√°rios verem apenas seus pr√≥prios pedidos
CREATE POLICY "Usu√°rios podem ver apenas seus pr√≥prios pedidos" ON public.orders
    FOR SELECT
    USING (auth.uid() = customer_id);

-- Pol√≠tica para usu√°rios criarem seus pr√≥prios pedidos
CREATE POLICY "Usu√°rios podem criar seus pr√≥prios pedidos" ON public.orders
    FOR INSERT
    WITH CHECK (auth.uid() = customer_id);

"@
            }
            "payments" {
                $migrationSql += @"
-- Pol√≠tica para usu√°rios verem apenas seus pr√≥prios pagamentos
CREATE POLICY "Usu√°rios podem ver apenas seus pr√≥prios pagamentos" ON public.payments
    FOR SELECT
    USING (auth.uid() IN (SELECT customer_id FROM public.orders WHERE id = order_id));

"@
            }
            "tickets" {
                $migrationSql += @"
-- Pol√≠tica para usu√°rios verem apenas seus pr√≥prios ingressos
CREATE POLICY "Usu√°rios podem ver apenas seus pr√≥prios ingressos" ON public.tickets
    FOR SELECT
    USING (auth.uid() = user_id);

-- Pol√≠tica para usu√°rios atualizarem apenas seus pr√≥prios ingressos
CREATE POLICY "Usu√°rios podem atualizar apenas seus pr√≥prios ingressos" ON public.tickets
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

"@
            }
        }
    }
    
    try {
        # Criar diret√≥rio de migra√ß√µes se n√£o existir
        $migrationsDir = "./supabase/migrations"
        if (-not (Test-Path $migrationsDir)) {
            New-Item -ItemType Directory -Path $migrationsDir -Force | Out-Null
        }
        
        # Salvar migra√ß√£o em arquivo
        $migrationFile = "$migrationsDir/$timestamp" + "_$migrationName.sql"
        Set-Content -Path $migrationFile -Value $migrationSql
        
        Write-Status "Migra√ß√£o criada: $migrationFile" "OK"
        
        # Aplicar migra√ß√£o
        Write-Host "`nüìã Aplicando migra√ß√£o..." -ForegroundColor Cyan
        supabase db push --linked
        
        Write-Status "Migra√ß√£o aplicada com sucesso" "OK"
    } catch {
        Write-Status "Falha ao aplicar migra√ß√£o" "ERRO" $Red
        Write-Host "Erro: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "`n‚úÖ Todas as tabelas cr√≠ticas j√° t√™m RLS ativado." -ForegroundColor Green
}

# 10. Verificar pol√≠ticas RLS
Write-Host "`nüìã Verificando pol√≠ticas RLS..." -ForegroundColor Cyan

try {
    foreach ($table in $existingTables) {
        $query = @"
        SELECT polname, polpermissive, polroles, polcmd, polqual, polwithcheck
        FROM pg_policy
        WHERE polrelid = 'public.$table'::regclass;
"@
        
        $policies = psql "$dbUrl" -c "$query"
        
        Write-Host "Pol√≠ticas para $table:" -ForegroundColor Cyan
        Write-Host $policies
    }
    
    Write-Status "Verifica√ß√£o de pol√≠ticas conclu√≠da" "OK"
} catch {
    Write-Status "Falha ao verificar pol√≠ticas" "AVISO" $Yellow
    Write-Host "Erro: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Resumo
Write-Host "`n‚úÖ Implementa√ß√£o de RLS conclu√≠da com sucesso!" -ForegroundColor Green

if ($tablesWithoutRLS.Count -gt 0) {
    Write-Host "RLS foi ativado para as seguintes tabelas: $($tablesWithoutRLS -join ", ")" -ForegroundColor Green
} else {
    Write-Host "Todas as tabelas cr√≠ticas j√° tinham RLS ativado." -ForegroundColor Green
}

Write-Host "`nPr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Execute ./validate.ps1 para validar as pol√≠ticas RLS" -ForegroundColor Cyan
Write-Host "2. Execute ./monitor.ps1 para monitorar a sa√∫de do banco de dados" -ForegroundColor Cyan
Write-Host "3. Verifique os logs de acesso para garantir que as pol√≠ticas est√£o funcionando corretamente" -ForegroundColor Cyan