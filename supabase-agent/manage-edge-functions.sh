#!/bin/bash
set -euo pipefail

# Configura√ß√£o
PROJECT_REF="${PROJECT_REF:-}"
ACTION="${ACTION:-list}"
FUNCTION_NAME="${FUNCTION_NAME:-}"
FUNCTION_PATH="${FUNCTION_PATH:-}"
ENVIRONMENT="${ENVIRONMENT:-staging}"

# Valida√ß√µes
[ -z "$SUPABASE_ACCESS_TOKEN" ] && { echo "‚ùå Token n√£o definido"; exit 1; }
[ -z "$PROJECT_REF" ] && { echo "‚ùå PROJECT_REF n√£o definido"; exit 1; }

echo "üîß Gerenciador de Edge Functions Supabase"
echo "Projeto: $PROJECT_REF"
echo "Ambiente: $ENVIRONMENT"
echo "A√ß√£o: $ACTION"

# Vincular projeto
echo "üîó Vinculando ao projeto ($PROJECT_REF)..."
supabase link --project-ref "$PROJECT_REF"

# Verificar status
echo "üìä Verificando status do projeto..."
supabase status

# Fun√ß√£o para listar fun√ß√µes
list_functions() {
    echo "üìã Listando Edge Functions..."
    supabase functions list --linked
}

# Fun√ß√£o para criar nova fun√ß√£o
create_function() {
    if [ -z "$FUNCTION_NAME" ]; then
        echo "‚ùå Nome da fun√ß√£o n√£o especificado"
        exit 1
    fi
    
    echo "üîß Criando Edge Function: $FUNCTION_NAME"
    supabase functions new "$FUNCTION_NAME" --linked
    
    echo "‚úÖ Edge Function '$FUNCTION_NAME' criada com sucesso"
    echo "üìù Edite o arquivo em: ./supabase/functions/$FUNCTION_NAME/index.ts"
}

# Fun√ß√£o para implantar fun√ß√£o
deploy_function() {
    if [ -z "$FUNCTION_NAME" ]; then
        echo "‚ùå Nome da fun√ß√£o n√£o especificado"
        exit 1
    fi
    
    # Verificar se a fun√ß√£o existe localmente
    if [ ! -d "./supabase/functions/$FUNCTION_NAME" ]; then
        echo "‚ùå Fun√ß√£o '$FUNCTION_NAME' n√£o encontrada localmente"
        exit 1
    fi
    
    echo "üöÄ Implantando Edge Function: $FUNCTION_NAME"
    supabase functions deploy "$FUNCTION_NAME" --linked
    
    echo "‚úÖ Edge Function '$FUNCTION_NAME' implantada com sucesso"
    
    # Obter URL da fun√ß√£o
    FUNCTION_URL="https://${PROJECT_REF}.supabase.co/functions/v1/${FUNCTION_NAME}"
    echo "üîó URL da fun√ß√£o: $FUNCTION_URL"
}

# Fun√ß√£o para implantar todas as fun√ß√µes
deploy_all_functions() {
    echo "üöÄ Implantando todas as Edge Functions..."
    
    # Verificar se o diret√≥rio de fun√ß√µes existe
    if [ ! -d "./supabase/functions" ]; then
        echo "‚ùå Diret√≥rio de fun√ß√µes n√£o encontrado"
        exit 1
    fi
    
    # Listar diret√≥rios de fun√ß√µes
    FUNCTIONS=$(find ./supabase/functions -maxdepth 1 -mindepth 1 -type d -not -path "*/\.*" -exec basename {} \;)
    
    if [ -z "$FUNCTIONS" ]; then
        echo "‚ÑπÔ∏è Nenhuma fun√ß√£o encontrada para implantar"
        exit 0
    fi
    
    echo "üìã Fun√ß√µes encontradas:"
    echo "$FUNCTIONS"
    
    # Implantar cada fun√ß√£o
    for func in $FUNCTIONS; do
        echo "\nüöÄ Implantando fun√ß√£o: $func"
        supabase functions deploy "$func" --linked
        echo "‚úÖ Fun√ß√£o '$func' implantada com sucesso"
    done
    
    echo "\n‚úÖ Todas as fun√ß√µes foram implantadas com sucesso"
}

# Fun√ß√£o para excluir fun√ß√£o
delete_function() {
    if [ -z "$FUNCTION_NAME" ]; then
        echo "‚ùå Nome da fun√ß√£o n√£o especificado"
        exit 1
    fi
    
    echo "üóëÔ∏è Excluindo Edge Function: $FUNCTION_NAME"
    
    # Confirmar exclus√£o
    read -p "‚ö†Ô∏è Tem certeza que deseja excluir a fun√ß√£o '$FUNCTION_NAME'? (s/N) " confirm
    if [[ "$confirm" != [sS] ]]; then
        echo "‚ÑπÔ∏è Opera√ß√£o cancelada"
        exit 0
    fi
    
    supabase functions delete "$FUNCTION_NAME" --linked
    
    echo "‚úÖ Edge Function '$FUNCTION_NAME' exclu√≠da com sucesso"
}

# Fun√ß√£o para obter logs
get_logs() {
    if [ -z "$FUNCTION_NAME" ]; then
        echo "üìã Obtendo logs de todas as fun√ß√µes..."
        supabase functions logs --linked
    else
        echo "üìã Obtendo logs da fun√ß√£o: $FUNCTION_NAME"
        supabase functions logs "$FUNCTION_NAME" --linked
    fi
}

# Fun√ß√£o para servir localmente
serve_local() {
    echo "üîß Iniciando servidor local de Edge Functions..."
    supabase functions serve --linked
}

# Fun√ß√£o para importar fun√ß√£o existente
import_function() {
    if [ -z "$FUNCTION_NAME" ] || [ -z "$FUNCTION_PATH" ]; then
        echo "‚ùå Nome da fun√ß√£o ou caminho n√£o especificado"
        exit 1
    fi
    
    # Verificar se o diret√≥rio de destino j√° existe
    if [ -d "./supabase/functions/$FUNCTION_NAME" ]; then
        echo "‚ö†Ô∏è Fun√ß√£o '$FUNCTION_NAME' j√° existe localmente"
        read -p "Deseja sobrescrever? (s/N) " confirm
        if [[ "$confirm" != [sS] ]]; then
            echo "‚ÑπÔ∏è Opera√ß√£o cancelada"
            exit 0
        fi
        rm -rf "./supabase/functions/$FUNCTION_NAME"
    fi
    
    # Criar diret√≥rio de fun√ß√µes se n√£o existir
    mkdir -p "./supabase/functions"
    
    # Copiar fun√ß√£o
    echo "üîÑ Importando fun√ß√£o de: $FUNCTION_PATH"
    cp -r "$FUNCTION_PATH" "./supabase/functions/$FUNCTION_NAME"
    
    echo "‚úÖ Fun√ß√£o '$FUNCTION_NAME' importada com sucesso"
}

# Fun√ß√£o para configurar vari√°veis de ambiente
set_secrets() {
    if [ -z "$FUNCTION_NAME" ]; then
        echo "‚ùå Nome da fun√ß√£o n√£o especificado"
        exit 1
    fi
    
    echo "üîí Configurando segredos para fun√ß√£o: $FUNCTION_NAME"
    
    # Verificar se existe um arquivo .env para a fun√ß√£o
    ENV_FILE="./supabase/functions/$FUNCTION_NAME/.env.$ENVIRONMENT"
    
    if [ ! -f "$ENV_FILE" ]; then
        echo "‚ö†Ô∏è Arquivo de ambiente n√£o encontrado: $ENV_FILE"
        read -p "Deseja criar um novo arquivo? (s/N) " confirm
        if [[ "$confirm" != [sS] ]]; then
            echo "‚ÑπÔ∏è Opera√ß√£o cancelada"
            exit 0
        fi
        touch "$ENV_FILE"
    fi
    
    # Ler vari√°veis do arquivo .env
    while IFS='=' read -r key value || [ -n "$key" ]; do
        # Pular linhas vazias ou coment√°rios
        if [[ -z "$key" || "$key" == \#* ]]; then
            continue
        fi
        
        # Remover aspas do valor
        value=$(echo "$value" | sed -e 's/^"//;s/"$//')
        
        echo "üîë Configurando segredo: $key"
        supabase secrets set "$key=$value" --env "$ENVIRONMENT" --linked
    done < "$ENV_FILE"
    
    echo "‚úÖ Segredos configurados com sucesso para fun√ß√£o '$FUNCTION_NAME'"
}

# Executar a√ß√£o especificada
case "$ACTION" in
    list)
        list_functions
        ;;
    create)
        create_function
        ;;
    deploy)
        if [ -z "$FUNCTION_NAME" ]; then
            deploy_all_functions
        else
            deploy_function
        fi
        ;;
    delete)
        delete_function
        ;;
    logs)
        get_logs
        ;;
    serve)
        serve_local
        ;;
    import)
        import_function
        ;;
    secrets)
        set_secrets
        ;;
    *)
        echo "‚ùå A√ß√£o desconhecida: $ACTION"
        echo "A√ß√µes dispon√≠veis: list, create, deploy, delete, logs, serve, import, secrets"
        exit 1
        ;;
esac

echo "\n‚úÖ Opera√ß√£o conclu√≠da com sucesso"