#!/bin/bash
set -euo pipefail

# Configura√ß√£o
PROJECT_REF="${PROJECT_REF:-}"
BACKUP_FILE="${BACKUP_FILE:-}"
RESTORE_TYPE="${RESTORE_TYPE:-full}"  # Op√ß√µes: schema, data, full
DRY_RUN="${DRY_RUN:-true}"

# Valida√ß√µes
[ -z "$SUPABASE_ACCESS_TOKEN" ] && { echo "‚ùå Token n√£o definido"; exit 1; }
[ -z "$PROJECT_REF" ] && { echo "‚ùå PROJECT_REF n√£o definido"; exit 1; }
[ -z "$BACKUP_FILE" ] && { echo "‚ùå BACKUP_FILE n√£o definido"; exit 1; }

# Verificar se o arquivo de backup existe
if [ ! -f "$BACKUP_FILE" ]; then
    echo "‚ùå Arquivo de backup n√£o encontrado: $BACKUP_FILE"
    exit 1
fi

echo "üîÑ Restaura√ß√£o do Banco de Dados Supabase"
echo "Projeto: $PROJECT_REF"
echo "Arquivo de backup: $BACKUP_FILE"
echo "Tipo de restaura√ß√£o: $RESTORE_TYPE"
echo "Modo: ${DRY_RUN/true/Simula√ß√£o}${DRY_RUN/false/Execu√ß√£o}"

# Verificar se o arquivo est√° comprimido
if [[ "$BACKUP_FILE" == *.gz ]]; then
    echo "üîÑ Descomprimindo arquivo de backup..."
    TEMP_FILE="/tmp/supabase_restore_$(date +%s).sql"
    gunzip -c "$BACKUP_FILE" > "$TEMP_FILE"
    BACKUP_FILE="$TEMP_FILE"
    echo "‚úÖ Arquivo descomprimido: $BACKUP_FILE"
fi

# Vincular projeto
echo "üîó Vinculando ao projeto $PROJECT_REF..."
supabase link --project-ref "$PROJECT_REF"

# Verificar status
echo "üìä Verificando status do projeto..."
supabase status

# Obter URL do banco de dados
DB_URL=$(supabase status | grep 'DB URL' | awk '{print $3}')

# Verificar se a URL do banco foi obtida
if [ -z "$DB_URL" ]; then
    echo "‚ùå N√£o foi poss√≠vel obter a URL do banco de dados"
    exit 1
fi

# Criar backup de seguran√ßa antes da restaura√ß√£o
if [ "$DRY_RUN" = "false" ]; then
    echo "üîÑ Criando backup de seguran√ßa antes da restaura√ß√£o..."
    SAFETY_BACKUP_DIR="/tmp/supabase_safety_backup_$(date +%s)"
    mkdir -p "$SAFETY_BACKUP_DIR"
    
    SAFETY_BACKUP_FILE="${SAFETY_BACKUP_DIR}/pre_restore_backup.sql"
    pg_dump "$DB_URL" --no-owner --no-acl > "$SAFETY_BACKUP_FILE"
    
    if [ -f "$SAFETY_BACKUP_FILE" ]; then
        echo "‚úÖ Backup de seguran√ßa criado: $SAFETY_BACKUP_FILE"
    else
        echo "‚ùå Falha ao criar backup de seguran√ßa"
        echo "‚ö†Ô∏è Abortando restaura√ß√£o por seguran√ßa"
        exit 1
    fi
fi

# Fun√ß√£o para executar SQL com ou sem dry run
execute_sql() {
    local sql_file="$1"
    local description="$2"
    
    echo "üîç $description"
    
    if [ "$DRY_RUN" = "true" ]; then
        echo "SQL que seria executado (primeiras 10 linhas):"
        head -n 10 "$sql_file"
        echo "..."
        echo "Total de linhas: $(wc -l < "$sql_file")"
    else
        echo "Executando SQL..."
        psql "$DB_URL" -f "$sql_file"
        echo "‚úÖ SQL executado com sucesso"
    fi
}

# Filtrar arquivo de backup conforme o tipo de restaura√ß√£o
if [ "$RESTORE_TYPE" = "schema" ] || [ "$RESTORE_TYPE" = "full" ]; then
    # Extrair apenas comandos de schema
    SCHEMA_FILE="/tmp/supabase_restore_schema_$(date +%s).sql"
    grep -E "CREATE |ALTER |DROP |COMMENT |SET |CREATE OR REPLACE FUNCTION|CREATE TRIGGER" "$BACKUP_FILE" > "$SCHEMA_FILE" || true
    
    # Verificar se h√° conte√∫do no arquivo de schema
    if [ -s "$SCHEMA_FILE" ]; then
        execute_sql "$SCHEMA_FILE" "Restaurando schema"
    else
        echo "‚ö†Ô∏è Nenhum comando de schema encontrado no arquivo de backup"
    fi
fi

if [ "$RESTORE_TYPE" = "data" ] || [ "$RESTORE_TYPE" = "full" ]; then
    # Extrair apenas comandos de dados
    DATA_FILE="/tmp/supabase_restore_data_$(date +%s).sql"
    grep -E "INSERT INTO|COPY |UPDATE " "$BACKUP_FILE" > "$DATA_FILE" || true
    
    # Verificar se h√° conte√∫do no arquivo de dados
    if [ -s "$DATA_FILE" ]; then
        execute_sql "$DATA_FILE" "Restaurando dados"
    else
        echo "‚ö†Ô∏è Nenhum comando de dados encontrado no arquivo de backup"
    fi
fi

# Limpar arquivos tempor√°rios
if [[ "$BACKUP_FILE" == /tmp/* ]]; then
    echo "üîÑ Limpando arquivos tempor√°rios..."
    rm -f "$BACKUP_FILE"
    [ -f "$SCHEMA_FILE" ] && rm -f "$SCHEMA_FILE"
    [ -f "$DATA_FILE" ] && rm -f "$DATA_FILE"
    echo "‚úÖ Arquivos tempor√°rios removidos"
fi

# Verificar integridade ap√≥s restaura√ß√£o
if [ "$DRY_RUN" = "false" ]; then
    echo "üîç Verificando integridade ap√≥s restaura√ß√£o..."
    
    # Verificar constraints
    INVALID_CONSTRAINTS=$(psql "$DB_URL" -t -c "
        SELECT
            conrelid::regclass AS table_name,
            conname AS constraint_name,
            contype AS constraint_type
        FROM
            pg_constraint
        WHERE
            NOT pg_catalog.pg_constraint_is_valid(oid)
            AND connamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
        ORDER BY
            conrelid::regclass::text;
    ")
    
    if [ -n "$INVALID_CONSTRAINTS" ]; then
        echo "‚ö†Ô∏è Constraints inv√°lidas encontradas ap√≥s restaura√ß√£o:"
        echo "$INVALID_CONSTRAINTS"
    else
        echo "‚úÖ Todas as constraints est√£o v√°lidas"
    fi
    
    # Verificar tabelas
    TABLE_COUNT=$(psql "$DB_URL" -t -c "SELECT COUNT(*) FROM pg_tables WHERE schemaname = 'public'" | tr -d ' ')
    echo "üìä $TABLE_COUNT tabelas encontradas no banco de dados"
    
    # Verificar fun√ß√µes
    FUNCTION_COUNT=$(psql "$DB_URL" -t -c "SELECT COUNT(*) FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid WHERE n.nspname = 'public'" | tr -d ' ')
    echo "üìä $FUNCTION_COUNT fun√ß√µes encontradas no banco de dados"
fi

echo "‚úÖ Processo de restaura√ß√£o conclu√≠do"

if [ "$DRY_RUN" = "true" ]; then
    echo "‚ÑπÔ∏è Esta foi apenas uma simula√ß√£o. Para executar a restaura√ß√£o, defina DRY_RUN=false"
else
    echo "‚ÑπÔ∏è Backup de seguran√ßa dispon√≠vel em: $SAFETY_BACKUP_FILE"
fi